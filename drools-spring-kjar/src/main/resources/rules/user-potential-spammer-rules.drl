package rules;

import forum.model.Post;
import forum.model.User;
import forum.model.PostLabelEnum;
import forum.model.UserLabelEnum;

import forum.event.DislikePostEvent;
import forum.event.LikePostEvent;
import forum.event.ReportPostEvent;
import forum.event.NewPostEvent;
import forum.event.DefaultUserActionEvent;
import forum.event.LikeQualityPostEvent;
import forum.event.CommunityContributorStreakEvent;
import forum.event.TopUserStreakEvent;

import forum.event.label.TopUserLabelEvent;
import forum.event.label.CommunityContributorUserLabelEvent;
import forum.event.label.SpammerUserLabelEvent;
import forum.event.label.HarmfulUserLabelEvent;
import forum.event.label.TemporarilySuspendedUserLabelEvent;
import forum.event.label.SuspendedUserLabelEvent;

import forum.event.label.TrendingPostLabelEvent;
import forum.event.label.PoorContentPostLabelEvent;
import forum.event.label.PotentiallyHarmfulPostLabelEvent;
import forum.event.label.HarmfulPostLabelEvent;

rule "Dislike/report activity is 50% or more in the past 24h"
	salience 9
	lock-on-active 
    when              
        $u: User($uId: username, !userLabels.contains(UserLabelEnum.POTENTIAL_SPAMMER), !userLabels.contains(UserLabelEnum.SPAMMER))
        $allActivity: Number(intValue >= 30) from accumulate(
            $e1: DefaultUserActionEvent(userId == $uId) 
            	over window:time(24h),
            count($e1)
        )
        $reports: Number() from accumulate(
            $e2: ReportPostEvent(userId == $uId) 
            	over window:time(24h),
            count($e2)
        )
        $dislikes: Number() from accumulate(
            $e3: DislikePostEvent(userId == $uId) 
            	over window:time(24h),
            count($e3)
        )
        eval (($reports.doubleValue() + $dislikes.doubleValue()) > (0.5 * $allActivity.doubleValue()))
    then    
    	System.out.println("Dislike/report activity is 50% or more in the past 24h: " + $uId);
    	$u.addLabel(UserLabelEnum.POTENTIAL_SPAMMER);
    	update($u);        
end

rule "Spammer (Reporting good content)"
	salience 8
    when              
        $u: User($uId: username, userLabels.contains(UserLabelEnum.POTENTIAL_SPAMMER))
        // All actions
        $reports1: Number() from accumulate(
            $e1: ReportPostEvent(userId == $uId) 
            	over window:time(24h),
            count($e1)
        )
        // Justified actions
        $reports2: Number() from accumulate(        	
            $e3: ReportPostEvent(userId == $uId, isJustified()) 
            	over window:time(24h),
            count($e3)
        )      
        eval (($reports2.doubleValue()) < (0.8 * $reports1.doubleValue()))
    then  
    	System.out.println("Spammer (Reporting good content): " + $uId);
    	$u.removeLabel(UserLabelEnum.POTENTIAL_SPAMMER);
    	insert(new SpammerUserLabelEvent($uId));
    	$u.addLabel(UserLabelEnum.SPAMMER);
    	update($u);        
end

rule "Spammer (Disliking good content)"
	salience 7
    when              
        $u: User($uId: username, userLabels.contains(UserLabelEnum.POTENTIAL_SPAMMER))
        // All actions
        $dislikes1: Number() from accumulate(
            $e2: DislikePostEvent(userId == $uId) 
            	over window:time(24h),
            count($e2)
        )
        // Justified actions
        $dislikes2: Number() from accumulate(
            $e4: DislikePostEvent(userId == $uId, isJustified())  
            	over window:time(24h),
            count($e4)
        )
        eval (($dislikes2.doubleValue()) < (0.8 * $dislikes1.doubleValue()))
    then   
    	System.out.println("Spammer (Disliking good content): " + $uId);
    	$u.removeLabel(UserLabelEnum.POTENTIAL_SPAMMER);
    	insert(new SpammerUserLabelEvent($uId));
    	$u.addLabel(UserLabelEnum.SPAMMER);
    	update($u);           
end

rule "Revoke potential spammer (Justified behaviour)"
	salience 6
    when              
        $u: User($uId: username, userLabels.contains(UserLabelEnum.POTENTIAL_SPAMMER))
        // All actions
        $reports1: Number() from accumulate(
            $e1: ReportPostEvent(userId == $uId) 
            	over window:time(24h),
            count($e1)
        )
        $dislikes1: Number() from accumulate(
            $e2: DislikePostEvent(userId == $uId) 
            	over window:time(24h),
            count($e2)
        )
        // Justified actions
        $reports2: Number() from accumulate(        	
            $e3: ReportPostEvent(userId == $uId, isJustified()) 
            	over window:time(24h),
            count($e3)
        )
        $dislikes2: Number() from accumulate(
            $e4: DislikePostEvent(userId == $uId, isJustified())  
            	over window:time(24h),
            count($e4)
        )
        eval (($reports2.doubleValue()) >= (0.8 * $reports1.doubleValue()))
        eval (($dislikes2.doubleValue()) >= (0.8 * $dislikes1.doubleValue()))
    then   
    	System.out.println("Revoke potential spammer (Justified behaviour): " + $uId);
    	$u.removeLabel(UserLabelEnum.POTENTIAL_SPAMMER);
    	update($u);        
end