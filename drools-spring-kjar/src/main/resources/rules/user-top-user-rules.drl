package rules;

import forum.model.Post;
import forum.model.User;
import forum.model.PostLabelEnum;
import forum.model.UserLabelEnum;

import forum.event.DislikePostEvent;
import forum.event.LikePostEvent;
import forum.event.ReportPostEvent;
import forum.event.NewPostEvent;
import forum.event.DefaultUserActionEvent;
import forum.event.LikeQualityPostEvent;
import forum.event.CommunityContributorStreakEvent;
import forum.event.TopUserStreakEvent;

import forum.event.label.TopUserLabelEvent;
import forum.event.label.CommunityContributorUserLabelEvent;
import forum.event.label.SpammerUserLabelEvent;
import forum.event.label.HarmfulUserLabelEvent;
import forum.event.label.TemporarilySuspendedUserLabelEvent;
import forum.event.label.SuspendedUserLabelEvent;

import forum.event.label.TrendingPostLabelEvent;
import forum.event.label.PoorContentPostLabelEvent;
import forum.event.label.PotentiallyHarmfulPostLabelEvent;
import forum.event.label.HarmfulPostLabelEvent;

rule "Top user 30s streak"
	salience 10
	lock-on-active
    when                 
        $u: User($uId: username, !userLabels.contains(UserLabelEnum.TOP_USER))   
        $p1: NewPostEvent(userId == $uId)
        	over window:time(30s)
        not $e1: TopUserStreakEvent(userId == $uId)    
        		over window:time(30s)                 
    then   
    	System.out.println("Top user 30s streak: " + $uId);
        insert(new TopUserStreakEvent($uId));            
end

rule "Top user label"
	salience 9
    when                 
        $u: User($uId: username, !userLabels.contains(UserLabelEnum.TOP_USER), !userLabels.contains(UserLabelEnum.SPAMMER))   
        $p: NewPostEvent(userId == $uId)
        	over window:time(30s)
        not $e1: TopUserLabelEvent(userId == $uId)      
        Number(intValue >= 4) from accumulate(
            $e2: TopUserStreakEvent(userId == $uId)
            	over window:time(125s),
           	count($e2)
        ) 
        not $p1: Post(postOwnerId == $uId, postLabels.contains(PostLabelEnum.POOR_CONTENT), inRecent2Mins())
        not $p2: Post(postOwnerId == $uId, reports >= 10, inRecent2Mins())
        not $p3: Post(postOwnerId == $uId, postLabels.contains(PostLabelEnum.HARMFUL), inRecent2Mins())
    then    
    	System.out.println("Top user label: " + $uId); 
        insert(new TopUserLabelEvent($uId));        
        $u.addLabel(UserLabelEnum.TOP_USER);
        update($u);    
end

rule "Revoke top user label (Spammer)"
    when                 
        $u: User($uId: username, userLabels.contains(UserLabelEnum.TOP_USER), userLabels.contains(UserLabelEnum.SPAMMER))
        $e: TopUserLabelEvent(userId == $uId)
    then     
    	System.out.println("Revoke top user label (Spammer): " + $uId); 
        delete($e);
    	$u.removeLabel(UserLabelEnum.TOP_USER);
    	update($u);        
end

rule "Revoke top user label (Poor Content post)"
    when                 
        $p: Post($pId: postId, $uId: postOwnerId)
        $e: PoorContentPostLabelEvent(postId == $pId)
        	over window:time(2m)
        $u: User(username == $uId, userLabels.contains(UserLabelEnum.TOP_USER))
        $e2: TopUserLabelEvent(userId == $uId)
    then             
    	System.out.println("Revoke top user label (Poor Content post): " + $uId); 
    	delete($e2);
    	$u.removeLabel(UserLabelEnum.TOP_USER);
    	update($u);        
end

rule "Revoke top user label (Potentially harmful post)"
    when                 
        $p: Post($pId: postId, $uId: postOwnerId)
        $e: PotentiallyHarmfulPostLabelEvent(postId == $pId)
        	over window:time(2m)
        $u: User(username == $uId, userLabels.contains(UserLabelEnum.TOP_USER))
        $e2: TopUserLabelEvent(userId == $uId)
    then      
    	System.out.println("Revoke top user label (Potentially harmful post): " + $uId);      
    	delete($e2);  
    	$u.removeLabel(UserLabelEnum.TOP_USER);
    	update($u);        
end

rule "Revoke top user label (Harmful post)"
    when                 
        $p: Post($pId: postId, $uId: postOwnerId)
        $e: HarmfulPostLabelEvent(postId == $pId)
        	over window:time(2m)
        $u: User(username == $uId, userLabels.contains(UserLabelEnum.TOP_USER))
        $e2: TopUserLabelEvent(userId == $uId)
    then  
    	System.out.println("Revoke top user label (Harmful post): " + $uId);            
    	delete($e2);   
    	$u.removeLabel(UserLabelEnum.TOP_USER);
    	update($u);        
end

rule "Revoke top user label (No posts in past 30s)"
    when                 
        $u: User($uId: username, userLabels.contains(UserLabelEnum.TOP_USER))
        not $e: NewPostEvent(userId == $uId)
        	over window:time(30s)
         $e2: TopUserLabelEvent(userId == $uId)
    then     
    	System.out.println("Revoke top user label (No posts in past 30s): " + $uId); 
    	delete($e2);          
    	$u.removeLabel(UserLabelEnum.TOP_USER);
    	update($u);        
end

